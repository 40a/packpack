#!/usr/bin/env python

from __future__ import print_function
import os
import sys
import subprocess
import yaml
import logging
from collections import OrderedDict

class Build():
    class Env: pass
    env = Env()

    def __init__(self):
        #
        # Create environment
        #
        self.env.__dict__ = os.environ.copy()
        script_path = os.path.realpath(__file__)
        self.env.SCRIPT_DIR = os.path.abspath(os.path.dirname(script_path))
        self.env.SOURCE_DIR = os.path.abspath(os.path.join(self.env.SCRIPT_DIR, ".."))

        # Configure yaml to preserve order
        _mapping_tag = yaml.resolver.BaseResolver.DEFAULT_MAPPING_TAG
        def dict_representer(dumper, data):
            return dumper.represent_dict(data.iteritems())
        def dict_constructor(loader, node):
            return OrderedDict(loader.construct_pairs(node))
        yaml.add_representer(OrderedDict, dict_representer)
        yaml.add_constructor(_mapping_tag, dict_constructor)

        #
        # Setup logging
        #
        self.log = logging.getLogger('build')
        self.log.setLevel(logging.DEBUG)
        formatter = logging.Formatter('%(asctime)s %(levelname)-5s: %(message)s')
        console_handler = logging.StreamHandler()
        console_handler.setFormatter(formatter)
        console_handler.setLevel(logging.INFO)
        self.log.addHandler(console_handler)
        file_handler = logging.FileHandler('build.log')
        file_handler.setFormatter(formatter)
        file_handler.setLevel(logging.DEBUG)
        self.log.addHandler(file_handler)

        self.log.info("## PackPack")

        #
        # Read configuration files
        #
        self.tasks = {}
        config_paths = [
            os.path.join(self.env.SOURCE_DIR, ".packpack.yml"),
            os.path.join(self.env.SCRIPT_DIR, "config.yml")
        ]
        for config_path in config_paths:
            if not os.path.exists(config_path):
                continue
            self.log.info("Found %s configuration file", config_path)
            with open(config_path, 'r') as f:
                root = yaml.load(f)
            for k, v in root.get('tasks', {}).items():
                if not k in self.tasks:
                    self.tasks[k] = v
            for k, v in root.get('env', {}).items():
                # Already set, ignore
                if hasattr(self.env, k):
                    # Variable is already set, ignore
                    continue
                if type(v) is list:
                    # Execute command to get variable value
                    v = self.execute_all(v, cwd = self.env.SOURCE_DIR,
                                         pipe = True)[-1].strip()
                elif type(v) is int:
                    # Convert value to string
                    v = str(v)
                elif type(v) is not str:
                    self.log.error("Invalid env.%s entry", k)
                    os.exit(-1)
                setattr(self.env, k, v)

        self.log.debug("Configuration:\n---\n%s---", yaml.dump({
            "env": self.env.__dict__, "tasks": self.tasks},
            width=70, indent=2, default_flow_style=False))

    def execute(self, cmd, cwd = None, code = 0, pipe = False):
        if type(cmd) is list:
            cmd = " ".join(cmd)
        p = subprocess.Popen(cmd,
            stdout = pipe and subprocess.PIPE or None,
            shell = True,
            cwd = cwd, env = self.env.__dict__);
        self.log.info("%s", cmd)
        (out, err) = p.communicate()
        if p.returncode != code:
            self.log.error("Command %s exited with code: %s",
                            cmd, p.returncode)
            sys.exit(1)
        if pipe:
            return out.decode('utf-8')

    def execute_all(self, commands, pipe = False, **kwargs):
        if not type(commands) is list:
            commands = [ commands ]
        results = []
        for command in commands:
            results.append(self.execute(command, pipe = pipe, **kwargs))
        if pipe:
            return results

    def info(self):
        self.log.info("%s", "-" * 80)
        self.log.info("Product:          %s", self.env.PRODUCT)
        self.log.info("Version:          %s", self.env.VERSION)
        self.log.info("Release:          %s", self.env.RELEASE)
        self.log.info("Target:           %s %s (%s)",
                      self.env.OS, self.env.DIST, self.env.PACK)
        if getattr(self.env, "DOCKER_REPO", ''):
            self.log.info("Docker Repo:      %s", self.env.DOCKER_REPO)
            self.log.info("Docker Image:     %s", self.env.DOCKER_TAG)
        else:
            self.log.info("Docker:           %s",
                          "skipped - missing DOCKER_REPO")

        if getattr(self.env, 'PACKAGECLOUD_TOKEN', ''):
            self.log.info("PackageCloud:     %s", self.env.PACKAGECLOUD_REPO)
        else:
            self.log.info("PackageCloud:     %s",
                          "skipped - missing PACKAGECLOUD_TOKEN")
        self.log.info("Build Directory:  %s", self.env.BUILD_DIR)
        self.log.info("%s", "-" * 80)

    def run(self, task):
        # TODO: move to yaml, implement proper dependency resolution
        DEPS = {
           "tarball": ["clean", "tarball"],
           "build": ["clean", "tarball", "build"],
           "all": ["clean", "tarball", "build"],
        }

        deps = DEPS.get(task, [task])
        for i, dep in enumerate(deps):
            self.log.info("## %s", dep)
            cwd = i < 2 and self.env.SOURCE_DIR or self.env.BUILD_DIR
            self.execute_all(self.tasks.get(dep, []), cwd = cwd)
            self.log.info("## %s done", dep)


def usage():
    print("Usage: ", sys.argv[0], "[command]")
    print("")
    print("Available commands:")
    tasks = [
        ("clean",       "remove all produced files"),
        ("tarball",     "pack source tarball"),
        ("build",       "pack packages"),
    ]
    for (task, description) in tasks:
        print("    ", task.ljust(20), description)
    print("")

if __name__ == '__main__':
    if len(sys.argv) == 1:
        task = os.getenv('TASK') or 'all'
    elif len(sys.argv) == 2 and sys.argv[1] not in ("-h", "--help"):
        task = sys.argv[1]
    else:
        usage()
        sys.exit(1)

    build = Build()
    build.info()
    build.run(task)
